### NoDocs ###
GET           /swagger.json          controllers.Assets.at(path="/public", file="swagger.json")

###
# summary: Returns logged in user
# tags:
#   - Account
# responses:
#   200:
#       description: Success
#       schema:
#           $ref: '#/definitions/controllers.api.user.ApiUser'
#   401:
#       $ref: '#/responses/Unauthorized'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /auth                  controllers.Authentication.me


###
# summary: Authenticate user by OAuth code
# tags:
#   - Account
# security: []
# parameters:
#   - name: body
#     schema:
#       type: object
#       properties:
#           code:
#               type: string
# responses:
#   200:
#       description: Success
#       schema:
#           type: object
#           properties:
#               token:
#                   type: string
#   400:
#       $ref: '#/responses/BadRequest'
#   401:
#       $ref: '#/responses/Unauthorized'
#   500:
#       $ref: '#/responses/InternalServerError'
###
POST          /auth/:provider        controllers.Authentication.auth(provider: String)

###
# summary: Returns user by ID
# tags:
#   - User
# responses:
#   200:
#       description: Success
#       schema:
#           $ref: '#/definitions/controllers.api.user.ApiUser'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /users/:id             controllers.UserController.getById(id: Long)

###
# summary: Returns list of users
# tags:
#   - User
# parameters:
#   - in: query
#     name: role
#     schema:
#     type: string
#     enum:
#       - "admin"
#       - "user"
#   - in: query
#     name: status
#     schema:
#     type: string
#     enum:
#       - "new"
#       - "approved"
#   - name: sort
#     in: query
#     type: string
#     pattern: '^-?\w+(,-?\w+)*$'
#     description: 'Available fields: id, name, email, role, status. Format: field1,-field2,...'
#   - $ref: '#/parameters/pageSize'
#   - $ref: '#/parameters/pageNumber'
# responses:
#   200:
#       description: Success
#       schema:
#           type: object
#           properties:
#               meta:
#                   $ref: '#/definitions/controllers.api.Response.Meta'
#               data:
#                   type: array
#                   items:
#                       $ref: '#/definitions/controllers.api.user.ApiUser'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /users                 controllers.UserController.getList(role: Option[controllers.api.user.ApiUser.ApiRole], status: Option[controllers.api.user.ApiUser.ApiStatus])

###
# summary: Updates user
# tags:
#   - User
# parameters:
#   - name: body
#     schema:
#       $ref: '#/definitions/controllers.api.user.ApiUser'
# responses:
#   200:
#       description: User updated
#       schema:
#           $ref: '#/definitions/controllers.api.user.ApiUser'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
PUT           /users/:id             controllers.UserController.update(id: Long)

###
# summary: Removes user by ID
# tags:
#   - User
# responses:
#   204:
#       description: User deleted successfully
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
DELETE        /users/:id             controllers.UserController.delete(id: Long)
