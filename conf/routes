### NoDocs ###
GET           /swagger.json                         controllers.Assets.at(path="/public", file="swagger.json")

###
# summary: Returns logged in user
# tags:
#   - Account
# responses:
#   200:
#       description: Success
#       schema:
#           $ref: '#/definitions/controllers.api.user.ApiUser'
#   401:
#       $ref: '#/responses/Unauthorized'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /auth                                 controllers.Authentication.me

###
# summary: Authenticate user by OAuth code
# tags:
#   - Account
# security: []
# parameters:
#   - name: body
#     schema:
#       type: object
#       properties:
#           code:
#               type: string
# responses:
#   200:
#       description: Success
#       schema:
#           type: object
#           properties:
#               token:
#                   type: string
#   400:
#       $ref: '#/responses/BadRequest'
#   401:
#       $ref: '#/responses/Unauthorized'
#   500:
#       $ref: '#/responses/InternalServerError'
###
POST          /auth/:provider                       controllers.Authentication.auth(provider: String)

###
# summary: Returns user by ID
# tags:
#   - User
# responses:
#   200:
#       description: Success
#       schema:
#           $ref: '#/definitions/controllers.api.user.ApiUser'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /users/:id                            controllers.UserController.getById(id: Long)

###
# summary: Returns list of users
# tags:
#   - User
# parameters:
#   - in: query
#     name: role
#     schema:
#     type: string
#     enum:
#       - "admin"
#       - "user"
#   - in: query
#     name: status
#     schema:
#     type: string
#     enum:
#       - "new"
#       - "approved"
#   - in: query
#     name: groupId
#     schema:
#     type: integer
#     description: 'group ID or "null"'
#     required: false
#   - name: sort
#     in: query
#     type: string
#     pattern: '^-?\w+(,-?\w+)*$'
#     description: 'Available fields: id, name, email, role, status, gender. Format: field1,-field2,...'
#   - $ref: '#/parameters/pageSize'
#   - $ref: '#/parameters/pageNumber'
# responses:
#   200:
#       description: Success
#       schema:
#           type: object
#           properties:
#               meta:
#                   $ref: '#/definitions/controllers.api.Response.Meta'
#               data:
#                   type: array
#                   items:
#                       $ref: '#/definitions/controllers.api.user.ApiUser'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /users                                controllers.UserController.getList(role: Option[controllers.api.user.ApiUser.ApiRole], status: Option[controllers.api.user.ApiUser.ApiStatus], groupId: org.davidbild.tristate.Tristate[Long], name: Option[String])

###
# summary: Updates user
# tags:
#   - User
# parameters:
#   - name: body
#     schema:
#       $ref: '#/definitions/controllers.api.user.ApiUser'
# responses:
#   200:
#       description: User updated
#       schema:
#           $ref: '#/definitions/controllers.api.user.ApiUser'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
PUT           /users/:id                            controllers.UserController.update(id: Long)

###
# summary: Removes user by ID
# tags:
#   - User
# responses:
#   204:
#       description: User deleted successfully
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   409:
#       $ref: '#/responses/Conflict'
#   500:
#       $ref: '#/responses/InternalServerError'
###
DELETE        /users/:id                            controllers.UserController.delete(id: Long)

###
# summary: Returns group by ID
# tags:
#   - Group
# responses:
#   200:
#       description: Success
#       schema:
#           $ref: '#/definitions/controllers.api.group.ApiGroup'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /groups/:id                           controllers.GroupController.getById(id: Long)

###
# summary: Returns list of groups
# tags:
#   - Group
# parameters:
#   - in: query
#     name: levels
#     type: string
#     description: comma separated list of available levels, e.g. 0,1,2
#     required: false
#   - in: query
#     name: parentId
#     schema:
#     type: integer
#     description: 'group parent ID or "null"'
#     required: false
#   - name: sort
#     in: query
#     type: string
#     pattern: '^-?\w+(,-?\w+)*$'
#     description: 'Available fields: id, name. Format: field1,-field2,...'
#   - $ref: '#/parameters/pageSize'
#   - $ref: '#/parameters/pageNumber'
# responses:
#   200:
#       description: Success
#       schema:
#           type: object
#           properties:
#               meta:
#                   $ref: '#/definitions/controllers.api.Response.Meta'
#               data:
#                   type: array
#                   items:
#                       $ref: '#/definitions/controllers.api.group.ApiGroup'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /groups                               controllers.GroupController.getList(parentId: org.davidbild.tristate.Tristate[Long], userId: Option[Long], name: Option[String], levels: Option[String])

###
# summary: Creates group
# tags:
#   - Group
# parameters:
#   - name: body
#     schema:
#       $ref: '#/definitions/controllers.api.group.ApiPartialGroup'
# responses:
#   201:
#       description: Group created
#       schema:
#           $ref: '#/definitions/controllers.api.group.ApiGroup'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
POST          /groups                               controllers.GroupController.create

###
# summary: Updates group
# tags:
#   - Group
# parameters:
#   - name: body
#     schema:
#       $ref: '#/definitions/controllers.api.group.ApiPartialGroup'
# responses:
#   200:
#       description: Group updated
#       schema:
#           $ref: '#/definitions/controllers.api.group.ApiGroup'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   409:
#       $ref: '#/responses/Conflict'
#   500:
#       $ref: '#/responses/InternalServerError'
###
PUT           /groups/:id                           controllers.GroupController.update(id: Long)

###
# summary: Removes group by ID
# tags:
#   - Group
# responses:
#   204:
#       description: Group deleted successfully
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   409:
#       $ref: '#/responses/Conflict'
#   500:
#       $ref: '#/responses/InternalServerError'
###
DELETE        /groups/:id                           controllers.GroupController.delete(id: Long)

###
# summary: Adds user to group
# tags:
#   - Group
# responses:
#   204:
#       description: User added to group successfully
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
POST          /groups/:groupId/users/:userId        controllers.UserGroupController.add(groupId: Long, userId: Long)

###
# summary: Remove user from group
# tags:
#   - Group
# responses:
#   204:
#       description: User removed from group successfully
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
DELETE        /groups/:groupId/users/:userId        controllers.UserGroupController.remove(groupId: Long, userId: Long)

###
# summary: Returns form template with elements by ID for user
# tags:
#   - Form template
#   - Assessment
# responses:
#   200:
#       description: Success
#       schema:
#           $ref: '#/definitions/controllers.api.form.ApiForm'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /forms/user/:id                        controllers.FormController.userGetById(id: Long, projectId: Long, eventId: Long)

###
# summary: Returns form template with elements by ID for admin
# tags:
#   - Form template
# responses:
#   200:
#       description: Success
#       schema:
#           $ref: '#/definitions/controllers.api.form.ApiForm'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /forms/:id                            controllers.FormController.getById(id: Long)

###
# summary: Returns list of form templates without elements
# tags:
#   - Form template
# parameters:
#   - name: sort
#     in: query
#     type: string
#     pattern: '^-?\w+(,-?\w+)*$'
#     description: 'Available fields: id, name. Format: field1,-field2,...'
#   - $ref: '#/parameters/pageSize'
#   - $ref: '#/parameters/pageNumber'
# responses:
#   200:
#       description: Success
#       schema:
#           type: object
#           properties:
#               meta:
#                   $ref: '#/definitions/controllers.api.Response.Meta'
#               data:
#                   type: array
#                   items:
#                       $ref: '#/definitions/controllers.api.form.ApiForm'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /forms                                controllers.FormController.getList

###
# summary: Creates form template
# tags:
#   - Form template
# parameters:
#   - name: body
#     schema:
#       $ref: '#/definitions/controllers.api.form.ApiPartialForm'
# responses:
#   201:
#       description: Form created
#       schema:
#           $ref: '#/definitions/controllers.api.form.ApiForm'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   409:
#       $ref: '#/responses/Conflict'
#   500:
#       $ref: '#/responses/InternalServerError'
###
POST          /forms                                controllers.FormController.create

###
# summary: Updates form template
# tags:
#   - Form template
# parameters:
#   - name: body
#     schema:
#       $ref: '#/definitions/controllers.api.form.ApiPartialForm'
# responses:
#   200:
#       description: Form updated
#       schema:
#           $ref: '#/definitions/controllers.api.form.ApiForm'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   409:
#       $ref: '#/responses/Conflict'
#   500:
#       $ref: '#/responses/InternalServerError'
###
PUT           /forms/:id                            controllers.FormController.update(id: Long)

###
# summary: Removes form template by ID
# tags:
#   - Form template
# responses:
#   204:
#       description: Form deleted successfully
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   409:
#       $ref: '#/responses/Conflict'
#   500:
#       $ref: '#/responses/InternalServerError'
###
DELETE        /forms/:id                            controllers.FormController.delete(id: Long)

###
# summary: Clones form with given ID
# tags:
#   - Form template
# responses:
#   201:
#       description: New form
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
POST          /forms/:id/clone                      controllers.FormController.cloneForm(id: Long)

###
# summary: Returns project by ID
# tags:
#   - Project
# responses:
#   200:
#       description: Success
#       schema:
#           $ref: '#/definitions/controllers.api.project.ApiProject'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /projects/:id                            controllers.ProjectController.getById(id: Long)

###
# summary: Returns list of projects
# tags:
#   - Project
# parameters:
#   - name: sort
#     in: query
#     type: string
#     pattern: '^-?\w+(,-?\w+)*$'
#     description: 'Available fields: id, name, description. Format: field1,-field2,...'
#   - $ref: '#/parameters/pageSize'
#   - $ref: '#/parameters/pageNumber'
# responses:
#   200:
#       description: Success
#       schema:
#           type: object
#           properties:
#               meta:
#                   $ref: '#/definitions/controllers.api.Response.Meta'
#               data:
#                   type: array
#                   items:
#                       $ref: '#/definitions/controllers.api.project.ApiProject'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /projects                                controllers.ProjectController.getList(eventId: Option[Long], groupId: Option[Long])

###
# summary: Creates project
# tags:
#   - Project
# parameters:
#   - name: body
#     schema:
#       $ref: '#/definitions/controllers.api.project.ApiPartialProject'
# responses:
#   201:
#       description: Project created
#       schema:
#           $ref: '#/definitions/controllers.api.project.ApiProject'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   409:
#       $ref: '#/responses/Conflict'
#   500:
#       $ref: '#/responses/InternalServerError'
###
POST          /projects                                controllers.ProjectController.create

###
# summary: Updates project
# tags:
#   - Project
# parameters:
#   - name: body
#     schema:
#       $ref: '#/definitions/controllers.api.project.ApiPartialProject'
# responses:
#   200:
#       description: Project updated
#       schema:
#           $ref: '#/definitions/controllers.api.project.ApiProject'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   409:
#       $ref: '#/responses/Conflict'
#   500:
#       $ref: '#/responses/InternalServerError'
###
PUT           /projects/:id                            controllers.ProjectController.update(id: Long)

###
# summary: Removes project
# tags:
#   - Project
# responses:
#   204:
#       description: Project deleted successfully
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   409:
#       $ref: '#/responses/Conflict'
#   500:
#       $ref: '#/responses/InternalServerError'
###
DELETE        /projects/:id                            controllers.ProjectController.delete(id: Long)

###
# summary: Returns relation by ID
# tags:
#   - Project
# responses:
#   200:
#       description: Success
#       schema:
#           $ref: '#/definitions/controllers.api.project.ApiRelation'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /relations/:id                           controllers.ProjectRelationController.getById(id: Long)

###
# summary: Returns list of relations
# tags:
#   - Project
# parameters:
#   - name: sort
#     in: query
#     type: string
#     pattern: '^-?\w+(,-?\w+)*$'
#     description: 'Available fields: id, projectId. Format: field1,-field2,...'
#   - $ref: '#/parameters/pageSize'
#   - $ref: '#/parameters/pageNumber'
# responses:
#   200:
#       description: Success
#       schema:
#           type: object
#           properties:
#               meta:
#                   $ref: '#/definitions/controllers.api.Response.Meta'
#               data:
#                   type: array
#                   items:
#                       $ref: '#/definitions/controllers.api.project.ApiRelation'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /relations                               controllers.ProjectRelationController.getList(projectId: Option[Long])

###
# summary: Creates relation
# tags:
#   - Project
# parameters:
#   - name: body
#     schema:
#       $ref: '#/definitions/controllers.api.project.ApiPartialRelation'
# responses:
#   201:
#       description: Relation created
#       schema:
#           $ref: '#/definitions/controllers.api.project.ApiRelation'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   409:
#       $ref: '#/responses/Conflict'
#   500:
#       $ref: '#/responses/InternalServerError'
###
POST          /relations                               controllers.ProjectRelationController.create

###
# summary: Updates relation
# tags:
#   - Project
# parameters:
#   - name: body
#     schema:
#       $ref: '#/definitions/controllers.api.project.ApiPartialRelation'
# responses:
#   200:
#       description: Relation updated
#       schema:
#           $ref: '#/definitions/controllers.api.project.ApiRelation'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   409:
#       $ref: '#/responses/Conflict'
#   500:
#       $ref: '#/responses/InternalServerError'
###
PUT           /relations/:id                           controllers.ProjectRelationController.update(id: Long)

###
# summary: Removes relation
# tags:
#   - Project
# responses:
#   204:
#       description: Relation deleted successfully
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
DELETE        /relations/:id                           controllers.ProjectRelationController.delete(id: Long)

###
# summary: Returns event by ID
# tags:
#   - Event
# responses:
#   200:
#       description: Success
#       schema:
#           $ref: '#/definitions/controllers.api.event.ApiEvent'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /events/:id                           controllers.EventController.getById(id: Long)

###
# summary: Returns list of events
# tags:
#   - Event
# parameters:
#   - name: status
#     in: query
#     required: false
#     schema:
#     type: string
#     enum:
#       - notStarted
#       - inProgress
#       - completed
#   - name: sort
#     in: query
#     type: string
#     pattern: '^-?\w+(,-?\w+)*$'
#     description: 'Available fields: id, start, end, description. Format: field1,-field2,...'
#   - $ref: '#/parameters/pageSize'
#   - $ref: '#/parameters/pageNumber'
# responses:
#   200:
#       description: Success
#       schema:
#           type: object
#           properties:
#               meta:
#                   $ref: '#/definitions/controllers.api.Response.Meta'
#               data:
#                   type: array
#                   items:
#                       $ref: '#/definitions/controllers.api.event.ApiEvent'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /events                               controllers.EventController.getList(status: Option[controllers.api.event.ApiEvent.EventStatus], projectId: Option[Long], onlyAvailable: Boolean ?= false)

###
# summary: Creates event
# tags:
#   - Event
# parameters:
#   - name: body
#     schema:
#       $ref: '#/definitions/controllers.api.event.ApiPartialEvent'
# responses:
#   201:
#       description: Event created
#       schema:
#           $ref: '#/definitions/controllers.api.event.ApiEvent'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
POST          /events                               controllers.EventController.create

###
# summary: Updates event
# tags:
#   - Event
# parameters:
#   - name: body
#     schema:
#       $ref: '#/definitions/controllers.api.event.ApiPartialEvent'
# responses:
#   200:
#       description: Event updated
#       schema:
#           $ref: '#/definitions/controllers.api.event.ApiEvent'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   409:
#       $ref: '#/responses/Conflict'
#   500:
#       $ref: '#/responses/InternalServerError'
###
PUT           /events/:id                           controllers.EventController.update(id: Long)

###
# summary: Removes event by ID
# tags:
#   - Event
# responses:
#   204:
#       description: Event deleted successfully
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   409:
#       $ref: '#/responses/Conflict'
#   500:
#       $ref: '#/responses/InternalServerError'
###
DELETE        /events/:id                           controllers.EventController.delete(id: Long)

###
# summary: Clones event
# tags:
#   - Event
# responses:
#   200:
#       description: Cloned event
#       schema:
#           $ref: '#/definitions/controllers.api.event.ApiEvent'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
POST          /events/:id/clone                       controllers.EventController.cloneEvent(id: Long)

###
# summary: Adds project to event
# tags:
#   - Event
# responses:
#   204:
#       description: Project added to event successfully
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
POST          /events/:eventId/projects/:projectId        controllers.EventProjectController.create(eventId: Long, projectId: Long)

###
# summary: Remove project from event
# tags:
#   - Event
# responses:
#   204:
#       description: Project removed from event successfully
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
DELETE        /events/:eventId/projects/:projectId        controllers.EventProjectController.delete(eventId: Long, projectId: Long)

###
# summary: Returns template by ID
# tags:
#   - Email template
# responses:
#   200:
#       description: Success
#       schema:
#           $ref: '#/definitions/controllers.api.template.ApiTemplate'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /templates/:id                              controllers.TemplateController.getById(id: Long)

###
# summary: Returns list of templates
# tags:
#   - Email template
# parameters:
#   - in: query
#     name: kind
#     schema:
#     type: string
#     enum:
#       - "preBegin"
#       - "begin"
#       - "preEnd"
#       - "end"
#   - in: query
#     name: recipient
#     schema:
#     type: string
#     enum:
#       - "respondent"
#       - "auditor"
#   - name: sort
#     in: query
#     type: string
#     pattern: '^-?\w+(,-?\w+)*$'
#     description: 'Available fields: id, name, kind, recipient. Format: field1,-field2,...'
#   - $ref: '#/parameters/pageSize'
#   - $ref: '#/parameters/pageNumber'
# responses:
#   200:
#       description: Success
#       schema:
#           type: object
#           properties:
#               meta:
#                   $ref: '#/definitions/controllers.api.Response.Meta'
#               data:
#                   type: array
#                   items:
#                       $ref: '#/definitions/controllers.api.template.ApiTemplate'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /templates                                  controllers.TemplateController.getList(kind: Option[controllers.api.notification.ApiNotificationKind], recipient: Option[controllers.api.notification.ApiNotificationRecipient])

###
# summary: Creates template
# tags:
#   - Email template
# parameters:
#   - name: body
#     schema:
#       $ref: '#/definitions/controllers.api.template.ApiPartialTemplate'
# responses:
#   201:
#       description: Template created
#       schema:
#           $ref: '#/definitions/controllers.api.template.ApiTemplate'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   500:
#       $ref: '#/responses/InternalServerError'
###
POST          /templates                                  controllers.TemplateController.create

###
# summary: Updates template
# tags:
#   - Email template
# parameters:
#   - name: body
#     schema:
#       $ref: '#/definitions/controllers.api.template.ApiPartialTemplate'
# responses:
#   200:
#       description: Template updated
#       schema:
#           $ref: '#/definitions/controllers.api.template.ApiTemplate'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
PUT           /templates/:id                              controllers.TemplateController.update(id: Long)

###
# summary: Removes template
# tags:
#   - Email template
# responses:
#   204:
#       description: Template deleted successfully
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   409:
#       $ref: '#/responses/Conflict'
#   500:
#       $ref: '#/responses/InternalServerError'
###
DELETE        /templates/:id                              controllers.TemplateController.delete(id: Long)

###
# summary: Clones template with given ID
# tags:
#   - Email template
# responses:
#   201:
#       description: New template
#       schema:
#           $ref: '#/definitions/controllers.api.template.ApiTemplate'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
POST          /templates/:id/clone                      controllers.TemplateController.cloneTemplate(id: Long)

###
# summary: Returns list of assessment objects
# tags:
#   - Assessment
# responses:
#   200:
#       description: Success
#       schema:
#           type: object
#           properties:
#               meta:
#                   $ref: '#/definitions/controllers.api.Response.Meta'
#               data:
#                   type: array
#                   items:
#                       $ref: '#/definitions/controllers.api.assessment.ApiAssessment'
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   404:
#       $ref: '#/responses/NotFound'
#   500:
#       $ref: '#/responses/InternalServerError'
###
GET           /assessments                              controllers.AssessmentController.getList(eventId: Long, projectId: Long)

###
# summary: Submits answers
# tags:
#   - Assessment
# parameters:
#   - name: body
#     schema:
#       $ref: '#/definitions/controllers.api.assessment.ApiPartialAssessment'
# responses:
#   200:
#       description: Template created
#   401:
#       $ref: '#/responses/Unauthorized'
#   403:
#       $ref: '#/responses/Forbidden'
#   409:
#       $ref: '#/responses/Conflict'
#   500:
#       $ref: '#/responses/InternalServerError'
###
POST          /assessments                              controllers.AssessmentController.submit(eventId: Long, projectId: Long)
